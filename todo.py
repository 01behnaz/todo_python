# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'todo.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from datetime import datetime
import pymysql



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(664, 541)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons8-todo-list-100 (1).png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("\n"
                                 "background-color: rgb(255, 230, 82);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(20, 139, 331, 291))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("\n"
                                     "background-color: rgb(255, 255, 255);")
        self.tabWidget.setDocumentMode(True)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_doit = QtWidgets.QWidget()
        self.tab_doit.setObjectName("tab_doit")
        self.tableWidget_doit = QtWidgets.QTableWidget(self.tab_doit)
        self.tableWidget_doit.setGeometry(QtCore.QRect(15, 17, 301, 231))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tableWidget_doit.setFont(font)
        self.tableWidget_doit.setColumnCount(3)
        self.tableWidget_doit.setObjectName("tableWidget_doit")
        self.tableWidget_doit.setRowCount(0)
        self.tableWidget_doit.setEditTriggers(
            QtWidgets.QAbstractItemView.NoEditTriggers)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_doit.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_doit.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_doit.setHorizontalHeaderItem(2, item)
        self.tableWidget_doit.verticalHeader().setVisible(False)
        header = self.tableWidget_doit.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)
        self.tabWidget.addTab(self.tab_doit, "")
        self.tab_doing = QtWidgets.QWidget()
        self.tab_doing.setObjectName("tab_doing")
        self.tableWidget_doing = QtWidgets.QTableWidget(self.tab_doing)
        self.tableWidget_doing.setGeometry(QtCore.QRect(15, 17, 301, 231))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tableWidget_doing.setFont(font)
        self.tableWidget_doing.setColumnCount(3)
        self.tableWidget_doing.setObjectName("tableWidget_doing")
        self.tableWidget_doing.setRowCount(0)
        self.tableWidget_doing.verticalHeader().setVisible(False)
        header = self.tableWidget_doing.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_doing.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_doing.setHorizontalHeaderItem(1, item)
        self.tableWidget_doing.setEditTriggers(
            QtWidgets.QAbstractItemView.NoEditTriggers)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_doing.setHorizontalHeaderItem(2, item)
        self.tabWidget.addTab(self.tab_doing, "")
        self.tab_done = QtWidgets.QWidget()
        self.tab_done.setObjectName("tab_done")
        self.tableWidget_done = QtWidgets.QTableWidget(self.tab_done)
        self.tableWidget_done.setGeometry(QtCore.QRect(15, 17, 301, 231))
        self.tableWidget_done.setEditTriggers(
            QtWidgets.QAbstractItemView.NoEditTriggers)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tableWidget_done.setFont(font)
        self.tableWidget_done.setColumnCount(3)
        self.tableWidget_done.setObjectName("tableWidget_done")
        self.tableWidget_done.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_done.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_done.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setPointSize(10)
        item.setFont(font)
        self.tableWidget_done.setHorizontalHeaderItem(2, item)
        self.tableWidget_done.verticalHeader().setVisible(False)
        self.tableWidget_done.verticalHeader().setHighlightSections(True)
        header = self.tableWidget_done.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)
        self.tabWidget.addTab(self.tab_done, "")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(28, 22, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setStyleSheet("\n"
                                 "color: rgb(51, 51, 51);")
        self.label.setObjectName("label")
        self.pushButton_edit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_edit.setGeometry(QtCore.QRect(204, 450, 61, 61))
        font = QtGui.QFont()
        font.setKerning(True)
        self.pushButton_edit.setFont(font)
        self.pushButton_edit.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_edit.clicked.connect(self.edit_task)
        self.pushButton_edit.setStyleSheet("QPushButton{\n"
                                           "background-color: rgb(147, 181, 198);\n"
                                           " border-radius: 10px;\n"
                                           "}\n"
                                           "QPushButton:Hover{\n"
                                           "background-color: rgb(237, 246, 229);\n"
                                           "}\n"
                                           "\n"
                                           "")
        self.pushButton_edit.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons8-edit-100.png"),
                        QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.pushButton_edit.setIcon(icon1)
        self.pushButton_edit.setIconSize(QtCore.QSize(30, 30))
        self.pushButton_edit.setObjectName("pushButton_edit")
        self.pushButton_delete = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_delete.setGeometry(QtCore.QRect(287, 450, 61, 61))
        self.pushButton_delete.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_delete.clicked.connect(self.delete_task)
        self.pushButton_delete.setStyleSheet("QPushButton{\n"
                                             "background-color: rgb(147, 181, 198);\n"
                                             " border-radius: 15px;\n"
                                             "}\n"
                                             "QPushButton:Hover{\n"
                                             "background-color: rgb(237, 246, 229);\n"
                                             "}\n"
                                             "")
        self.pushButton_delete.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons8-delete-100.png"),
                        QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.pushButton_delete.setIcon(icon2)
        self.pushButton_delete.setIconSize(QtCore.QSize(45, 45))
        self.pushButton_delete.setObjectName("pushButton_delete")
        self.pushButton_clear = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_clear.setGeometry(QtCore.QRect(295, 90, 51, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_clear.setFont(font)
        self.pushButton_clear.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_clear.clicked.connect(self.msg_clear)
        self.pushButton_clear.setStyleSheet("QPushButton{\n"
                                            " color: rgb(51, 51, 51);\n"
                                            "background-color: rgb(147, 181, 198);\n"
                                            "font: 13pt \"MS Shell Dlg 2\";\n"
                                            " border-radius: 10px;\n"
                                            "}\n"
                                            "QPushButton:Hover{\n"
                                            " color: rgb(51, 51, 51);\n"
                                            "background-color: rgb(237, 246, 229);\n"
                                            "}\n"
                                            "")
        self.pushButton_clear.setObjectName("pushButton_clear")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(369, 80, 281, 441))
        font = QtGui.QFont()
        font.setUnderline(False)
        self.widget.setFont(font)
        self.widget.setStyleSheet("background-color: rgb(147, 181, 198);\n"
                                  " border-radius: 5px;\n"
                                  "")
        self.widget.setObjectName("widget")
        self.label_mytask = QtWidgets.QLabel(self.widget)
        self.label_mytask.setGeometry(QtCore.QRect(20, 132, 81, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_mytask.setFont(font)
        self.label_mytask.setStyleSheet("color: rgb(51, 51, 51);\n"
                                        "font: 13pt \"MS Shell Dlg 2\";")
        self.label_mytask.setObjectName("label_mytask")
        self.lineEdit_mytask = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_mytask.setGeometry(QtCore.QRect(130, 134, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_mytask.setFont(font)
        self.lineEdit_mytask.setStyleSheet("color: rgb(51, 51, 51);\n"
                                           "background-color: rgb(255, 255, 255);")
        self.lineEdit_mytask.setText("")
        self.lineEdit_mytask.setObjectName("lineEdit_mytask")
        self.label_category = QtWidgets.QLabel(self.widget)
        self.label_category.setGeometry(QtCore.QRect(20, 200, 81, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_category.setFont(font)
        self.label_category.setStyleSheet("color: rgb(51, 51, 51);\n"
                                          "font: 13pt \"MS Shell Dlg 2\";")
        self.label_category.setObjectName("label_category")
        self.label_priority = QtWidgets.QLabel(self.widget)
        self.label_priority.setGeometry(QtCore.QRect(20, 270, 71, 31))
        self.label_priority.setStyleSheet("color: rgb(51, 51, 51);\n"
                                          "font: 13pt \"MS Shell Dlg 2\";")
        self.label_priority.setObjectName("label_priority")
        self.comboBox_category = QtWidgets.QComboBox(self.widget)
        self.comboBox_category.setGeometry(QtCore.QRect(130, 206, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox_category.setFont(font)
        self.comboBox_category.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                             "color: rgb(51, 51, 51);")
        self.comboBox_category.setFrame(True)
        self.comboBox_category.setObjectName("comboBox_category")
        self.comboBox_category.addItem("")
        self.comboBox_category.addItem("")
        self.comboBox_category.addItem("")
        self.comboBox_category.addItem("")
        self.comboBox_category.addItem("")
        self.comboBox_category.addItem("")
        self.comboBox_category.addItem("")
        self.comboBox_category.addItem("")
        self.comboBox_priority = QtWidgets.QComboBox(self.widget)
        self.comboBox_priority.setGeometry(QtCore.QRect(130, 270, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox_priority.setFont(font)
        self.comboBox_priority.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                             "color: rgb(51, 51, 51);")
        self.comboBox_priority.setFrame(True)
        self.comboBox_priority.setObjectName("comboBox_priority")
        self.comboBox_priority.addItem("")
        self.comboBox_priority.addItem("")
        self.comboBox_priority.addItem("")
        self.comboBox_priority.addItem("")
        self.label_addtask = QtWidgets.QLabel(self.widget)
        self.label_addtask.setGeometry(QtCore.QRect(80, 47, 111, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_addtask.setFont(font)
        self.label_addtask.setStyleSheet("color: rgb(51, 51, 51);\n"
                                         "font: 75 8pt \"MS Shell Dlg 2\";\n"
                                         "font: 16pt \"MS Shell Dlg 2\";")
        self.label_addtask.setObjectName("label_addtask")
        self.pushButton_add = QtWidgets.QPushButton(self.widget)
        self.pushButton_add.setGeometry(QtCore.QRect(110, 370, 61, 61))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pushButton_add.setFont(font)
        self.pushButton_add.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_add.clicked.connect(self.add_task)
        self.pushButton_add.setStyleSheet("QPushButton{\n"
                                          "background-color: rgb(255, 230, 82);\n"
                                          " border-radius: 15px;\n"
                                          "}\n"
                                          "QPushButton:Hover{\n"
                                          "background-color: rgb(237, 246, 229);\n"
                                          "}\n"
                                          "\n"
                                          "\n"
                                          "")
        self.pushButton_add.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons8-plus-100.png"),
                        QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.pushButton_add.setIcon(icon3)
        self.pushButton_add.setIconSize(QtCore.QSize(40, 40))
        self.pushButton_add.setObjectName("pushButton_add")
        self.pushButton_doing = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_doing.setGeometry(QtCore.QRect(34, 450, 61, 61))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_doing.setFont(font)
        self.pushButton_doing.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_doing.clicked.connect(self.doing_task)
        self.pushButton_doing.setStyleSheet("QPushButton{\n"
                                            " color: rgb(51, 51, 51);\n"
                                            "background-color: rgb(147, 181, 198);\n"
                                            "font: 13pt \"MS Shell Dlg 2\";\n"
                                            " border-radius: 10px;\n"
                                            "}\n"
                                            "QPushButton:Hover{\n"
                                            " color: rgb(51, 51, 51);\n"
                                            "background-color: rgb(237, 246, 229);\n"
                                            "}\n"
                                            "")
        self.pushButton_doing.setObjectName("pushButton_doing")
        self.pushButton_done = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_done.setGeometry(QtCore.QRect(119, 450, 61, 61))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(13)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_done.setFont(font)
        self.pushButton_done.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_done.clicked.connect(self.done_task)
        self.pushButton_done.setStyleSheet("QPushButton{\n"
                                           " color: rgb(51, 51, 51);\n"
                                           "background-color: rgb(147, 181, 198);\n"
                                           "font: 13pt \"MS Shell Dlg 2\";\n"
                                           " border-radius: 10px;\n"
                                           "}\n"
                                           "QPushButton:Hover{\n"
                                           " color: rgb(51, 51, 51);\n"
                                           "background-color: rgb(237, 246, 229);\n"
                                           "}\n"
                                           "")
        self.pushButton_done.setObjectName("pushButton_done")
        self.lineEdit_search = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_search.setGeometry(QtCore.QRect(99, 90, 131, 31))
        self.lineEdit_search.setStyleSheet("color: rgb(51, 51, 51);\n"
                                           "background-color: rgb(255, 255, 255);\n"
                                           " border-radius: 5px;")
        self.lineEdit_search.setObjectName("lineEdit_search")
        self.label_search = QtWidgets.QLabel(self.centralwidget)
        self.label_search.setGeometry(QtCore.QRect(29, 94, 61, 21))
        self.label_search.setStyleSheet("color: rgb(51, 51, 51);\n"
                                        "font: 13pt \"MS Shell Dlg 2\";")
        self.label_search.setObjectName("label_search")
        self.label_date = QtWidgets.QLabel(self.centralwidget)
        self.label_date.setGeometry(QtCore.QRect(370, 10, 281, 61))
        self.label_date.setStyleSheet("border-radius: 5px;\n"
                                      "background-color: rgb(255, 255, 255);\n"
                                      "font: 75 8pt \"MS Shell Dlg 2\";\n"
                                      "font: 12pt \"MS Shell Dlg 2\";\n"
                                      "color: rgb(51, 51, 51);")
        self.label_date.setText("")
        self.label_date.setObjectName("label_date")
        now = datetime.now()
        self.label_date.setText(now.strftime(
            '   ' + now.strftime('%A') + '\n   ' + "%d/%m/%Y"))
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        my_connection = pymysql.connect(
            host="localhost",
            user="root",
            passwd="your_password",
            database="your_database"
        )
        my_cursor = my_connection.cursor()
        my_cursor.execute('SELECT * FROM Doit')
        records = my_cursor.fetchall()
        self.tableWidget_doit.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_doit.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_doit.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_doit.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        my_cursor.execute('SELECT * FROM Doing')
        records = my_cursor.fetchall()
        self.tableWidget_doing.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_doing.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_doing.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_doing.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        my_cursor.execute('SELECT * FROM Done')
        records = my_cursor.fetchall()
        self.tableWidget_done.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_done.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_done.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_done.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        my_connection.commit()
        my_connection.close()

    def msg(self,myicon,mytitle,mytext):
        msg = QMessageBox()
        msg.setWindowIcon(QIcon(myicon))
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle(mytitle)
        msg.setText(mytext)
        msg.exec_()
        

    def doing_task(self):
        my_connection = pymysql.connect(
            host="localhost",
            user="root",
            passwd="your_password",
            database="your_database"
        )
        my_cursor = my_connection.cursor()
        task = self.lineEdit_search.text()
        myTable = 'SELECT MyTask FROM Doit WHERE MyTask=%s'
        my_cursor.execute(myTable, [(task)])
        records = my_cursor.fetchall()
        if self.lineEdit_search.text() == '':
            self.msg('icons8-error-100.png',"Warning","Write the task you want to do! ")
        elif records == ():
            self.msg('icons8-error-100.png',"Warning","This task does not exist! ")
        else:
            doing = "INSERT INTO Doing SELECT * FROM Doit WHERE MyTask=%s;"
            task = self.lineEdit_search.text()
            my_cursor.execute(doing, [(task)])
            my_connection.commit()
        my_cursor.execute('SELECT * FROM Doing')
        records = my_cursor.fetchall()
        self.tableWidget_doing.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_doing.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_doing.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_doing.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        task = self.lineEdit_search.text()
        myTable = 'DELETE FROM Doit WHERE MyTask=%s'
        my_cursor.execute(myTable, [(task)])
        self.lineEdit_search.setText("")
        my_cursor.execute('SELECT * FROM Doit')
        records = my_cursor.fetchall()
        self.tableWidget_doit.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_doit.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_doit.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_doit.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        my_connection.commit()
        my_connection.close()

    def done_task(self):
        my_connection = pymysql.connect(
            host="localhost",
            user="root",
            passwd="your_password",
            database="your_database"
        )
        my_cursor = my_connection.cursor()
        task = self.lineEdit_search.text()
        myTable = 'SELECT MyTask FROM Doing WHERE MyTask=%s'
        my_cursor.execute(myTable, [(task)])
        record = my_cursor.fetchall()
        if self.lineEdit_search.text() == '':
            self.msg('icons8-error-100.png',"Warning","Write the task you have done!  ")
        elif record == ():
            self.msg('icons8-error-100.png',"Warning","This task does not exist! ")
        else:
            done = "INSERT INTO Done SELECT * FROM Doing WHERE MyTask=%s;"
            task = self.lineEdit_search.text()
            my_cursor.execute(done, [(task)])
            my_connection.commit()
        my_cursor.execute('SELECT * FROM Done')
        records = my_cursor.fetchall()
        self.tableWidget_done.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_done.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_done.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_done.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        task = self.lineEdit_search.text()
        myTable = 'DELETE FROM Doing WHERE MyTask=%s'
        my_cursor.execute(myTable, [(task)])
        self.lineEdit_search.setText("")
        my_cursor.execute('SELECT * FROM Doing')
        records = my_cursor.fetchall()
        self.tableWidget_doing.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_doing.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_doing.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_doing.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        my_connection.commit()
        my_connection.close()

    def msg_clear(self):
        msg = QMessageBox()
        msg.setWindowIcon(QIcon('icons8-question-mark-100.png'))
        msg.setIcon(QMessageBox.Question)
        msg.setWindowTitle("Question")
        msg.setText("Are you sure you want to clear the tasks? ")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.buttonClicked.connect(self.clear_task)
        msg.exec_()

    def clear_task(self):
        my_connection = pymysql.connect(
            host="localhost",
            user="root",
            passwd="your_password",
            database="your_database"
        )
        my_cursor = my_connection.cursor()
        clear = "DELETE FROM Doit"
        my_cursor.execute(clear)
        clear = "DELETE FROM Doing"
        my_cursor.execute(clear)
        clear = "DELETE FROM Done"
        my_cursor.execute(clear)
        my_cursor.execute('SELECT * FROM Doit')
        records = my_cursor.fetchall()
        self.tableWidget_doit.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_doit.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_doit.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_doit.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        my_cursor.execute('SELECT * FROM Doing')
        records = my_cursor.fetchall()
        self.tableWidget_doing.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_doing.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_doing.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_doing.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        my_cursor.execute('SELECT * FROM Done')
        records = my_cursor.fetchall()
        self.tableWidget_done.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_done.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_done.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_done.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        my_connection.commit()
        my_connection.close()

    def edit_task(self):
        my_connection = pymysql.connect(
            host='localhost',
            user='root',
            password="your_password",
            database='your_database'
        )
        my_cursor = my_connection.cursor()
        task= self.lineEdit_search.text()
        myTable = 'SELECT MyTask FROM Doit WHERE MyTask=%s'
        my_cursor.execute(myTable, [(task)])
        records = my_cursor.fetchall()
        if self.lineEdit_search.text() == '':
            self.msg('icons8-error-100.png',"Warning","Write the task you want to edit! ")
        elif records == ():
            self.msg('icons8-error-100.png',"Warning","This task does not exist! ")
        else:
            if self.lineEdit_mytask.text() == '':
                self.msg('icons8-error-100.png',"Warning","Please complete all items! ")
            else:
                my_cursor.execute("""UPDATE Doit SET MyTask=%s,Category=%s,Priority=%s WHERE MyTask=%s;
                """, (self.lineEdit_mytask.text(),
                    self.comboBox_category.currentText(),
                    self.comboBox_priority.currentText(),
                    self.lineEdit_search.text()
                    ))
            self.lineEdit_mytask.setText("")
            my_cursor.execute('SELECT * FROM Doit')
            records = my_cursor.fetchall()
            self.tableWidget_doit.setRowCount(len(records))
            row = 0
            for record in records:
                self.tableWidget_doit.setItem(row, 0, QtWidgets.QTableWidgetItem(
                    record[0]))
                self.tableWidget_doit.setItem(row, 1, QtWidgets.QTableWidgetItem(
                    record[1]))
                self.tableWidget_doit.setItem(
                    row, 2, QtWidgets.QTableWidgetItem(record[2]))
                row += 1
            my_connection.commit()
        my_connection.close()

    def msg_delete(self):
        my_connection = pymysql.connect(
            host="localhost",
            user="root",
            passwd="your_password",
            database="your_database"
        )
        my_cursor = my_connection.cursor()
        task = self.lineEdit_search.text()
        myTable = 'DELETE FROM Doit WHERE MyTask=%s'
        self.lineEdit_search.setText("")
        my_cursor.execute(myTable, [(task)])
        my_cursor.execute('SELECT * FROM Doit')
        records = my_cursor.fetchall()
        self.tableWidget_doit.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_doit.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_doit.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_doit.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        my_connection.commit()
        my_connection.close()

    def delete_task(self):
        my_connection = pymysql.connect(
            host="localhost",
            user="root",
            passwd="your_password",
            database="your_database"
        )
        my_cursor = my_connection.cursor()
        task = self.lineEdit_search.text()
        myTable = 'SELECT MyTask FROM Doit WHERE MyTask=%s'
        my_cursor.execute(myTable, [(task)])
        records = my_cursor.fetchall()
        if self.lineEdit_search.text() == '':
            self.msg('icons8-error-100.png',"Warning","Write the task you want to delete! ")
        elif records == ():
            self.msg('icons8-error-100.png',"Warning","This task does not exist! ")
        else:
            msg = QMessageBox()
            msg.setWindowIcon(QIcon('icons8-question-mark-100.png'))
            msg.setIcon(QMessageBox.Question)
            msg.setWindowTitle("Question")
            msg.setText("Are you sure you want to delete this task? ")
            msg.setStandardButtons(QMessageBox.Ok)
            msg.buttonClicked.connect(self.msg_delete)
            msg.exec_()
        my_connection.close()

    def add_task(self):
        my_connection = pymysql.connect(
            host="localhost",
            user="root",
            passwd="your_password",
            database="your_database"
        )
        my_cursor = my_connection.cursor()
        myTable = "INSERT INTO Doit (MyTask, Category, Priority) VALUES (%s,%s,%s)"
        if self.lineEdit_mytask.text() == '':
            self.msg('icons8-error-100.png',"Warning","You must write your own task! ")
        else:
            value = (self.lineEdit_mytask.text(), self.comboBox_category.currentText(
            ), self.comboBox_priority.currentText())
            self.lineEdit_mytask.setText("")
            my_cursor.execute(myTable, value)
        my_cursor.execute('SELECT * FROM Doit')
        records = my_cursor.fetchall()
        self.tableWidget_doit.setRowCount(len(records))
        row = 0
        for record in records:
            self.tableWidget_doit.setItem(row, 0, QtWidgets.QTableWidgetItem(
                record[0]))
            self.tableWidget_doit.setItem(row, 1, QtWidgets.QTableWidgetItem(
                record[1]))
            self.tableWidget_doit.setItem(
                row, 2, QtWidgets.QTableWidgetItem(record[2]))
            row += 1
        my_connection.commit()
        my_connection.close()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Todo List"))
        self.tabWidget.setToolTip(_translate(
            "MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        item = self.tableWidget_doit.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "My Task"))
        item = self.tableWidget_doit.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Category"))
        item = self.tableWidget_doit.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Priority"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tab_doit), _translate("MainWindow", "do it"))
        item = self.tableWidget_doing.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "My Task"))
        item = self.tableWidget_doing.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Category"))
        item = self.tableWidget_doing.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Priority"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tab_doing), _translate("MainWindow", "doing"))
        item = self.tableWidget_done.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "My Task"))
        item = self.tableWidget_done.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Category"))
        item = self.tableWidget_done.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Priority"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tab_done), _translate("MainWindow", "done"))
        self.label.setText(_translate("MainWindow", "Todo List"))
        self.pushButton_clear.setText(_translate("MainWindow", "clear"))
        self.label_mytask.setText(_translate("MainWindow", " My Task"))
        self.label_category.setText(_translate("MainWindow", " Category"))
        self.label_priority.setText(_translate("MainWindow", " Priority"))
        self.comboBox_category.setItemText(
            0, _translate("MainWindow", " Family"))
        self.comboBox_category.setItemText(
            1, _translate("MainWindow", " Work"))
        self.comboBox_category.setItemText(2, _translate("MainWindow", " EN"))
        self.comboBox_category.setItemText(
            3, _translate("MainWindow", " Sport"))
        self.comboBox_category.setItemText(
            4, _translate("MainWindow", " Friend"))
        self.comboBox_category.setItemText(
            5, _translate("MainWindow", " Book"))
        self.comboBox_category.setItemText(
            6, _translate("MainWindow", " Shopping"))
        self.comboBox_category.setItemText(
            7, _translate("MainWindow", " other"))
        self.comboBox_priority.setItemText(
            0, _translate("MainWindow", " High"))
        self.comboBox_priority.setItemText(
            1, _translate("MainWindow", " Medium"))
        self.comboBox_priority.setItemText(2, _translate("MainWindow", " Low"))
        self.comboBox_priority.setItemText(
            3, _translate("MainWindow", " None"))
        self.label_addtask.setText(_translate("MainWindow", "  Add Task"))
        self.pushButton_doing.setText(_translate("MainWindow", "doing"))
        self.pushButton_done.setText(_translate("MainWindow", "done"))
        self.label_search.setText(_translate("MainWindow", " Search:"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
